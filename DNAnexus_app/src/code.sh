#!/bin/bash
# HaploPrep 1.2.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of DNAbam: '$DNAbam'"
    echo "Value of FBvcf: '$FBvcf'"
    echo "Value of FBtxt: '$FBtxt'"
    
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$DNAbam" -o DNA.bam
    
    dx download "$FBvcf" -o FB.vcf

    for i in ${!FBtxt[@]}
    do
        dx download "${FBtxt[$i]}" -o FB.txt
    done
    
    tar xzf hg19.tar.gz &> /dev/null
	tar xzf hg19_no_alt.tar.gz &> /dev/null
	chmod +x jdk-6u45-linux-x64.bin &> /dev/null
	./jdk-6u45-linux-x64.bin &> /dev/null
	sudo mkdir /usr/lib/jvm &> /dev/null
	sudo mv jdk1.6.0_45 /usr/lib/jvm/ &> /dev/null
	sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.6.0_45/bin/javac 1 &> /dev/null
	sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.6.0_45/bin/java 1 &> /dev/null 
	sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk1.6.0_45/bin/javaws 1 &> /dev/null
    java -version
    
    sudo apt-get install -y devscripts &> /dev/null
	sudo apt-get remove -y r-cran-* &> /dev/null
	sudo apt-get install -y libxml2-dev
	tar xzf R-3.5.2.tar.gz &> /dev/null
	cd R-3.5.2
	./configure --with-readline=no --with-x=no &> /dev/null
	make &> /dev/null
	sudo make install &> /dev/null
	cd
	
	Rscript -e 'install.packages("Rcpp_1.0.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("rlang_0.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("ellipsis_0.3.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("glue_1.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("lifecycle_0.2.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("magrittr_1.5.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("purrr_0.3.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("generics_0.0.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("ape_5.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("digest_0.6.25.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vctrs_0.3.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("assertthat_0.2.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("crayon_1.3.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("fansi_0.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("cli_2.0.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("utf8_1.1.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pillar_1.4.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("tidyselect_1.1.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pkgconfig_2.0.3.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("tibble_3.0.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R6_2.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("dplyr_1.0.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("memuse_4.1-0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pinfsc50_1.2.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("stringi_1.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("stringr_1.4.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("permute_0.9-5.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vegan_2.5-6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("viridisLite_0.3.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vcfR_1.11.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("base64enc_0.1-3.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("htmltools_0.5.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("jsonlite_1.7.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("repr_1.1.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("data.table_1.12.8.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("memisc_0.99.22.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.methodsS3_1.8.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.oo_1.23.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.utils_2.9.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("zip_2.0.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("openxlsx", repos="https://cran.rstudio.com")' &> /dev/null	

	Rscript Rfilter.R
	
	tar xf samtools-1.9.tar.bz2 &> /dev/null
	cd samtools-1.9
	./configure &> /dev/null
	make &> /dev/null
	sudo make install &> /dev/null
    export PATH=/usr/local/bin:$PATH &> /dev/null
    cd
    
    echo "Indexing Bulk Sample"
    samtools index DNA.bam
    echo "Running Mpileup on Filtered Heterozygous SNPs"
   	perl Mpileup.pl MpileupInput.txt DNA.bam &> /dev/null
    
   	Rscript RInformativeSNP.R
   	echo "Running ReadBackedPhasing"
    java -jar GenomeAnalysisTK.jar -T ReadBackedPhasing -R hg19_no_alt.fa -I DNA.bam  --variant InformativeSNPs.vcf -o phased_SNPs.vcf

	Rscript RInputVariants.R
	
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    
	name=$(dx describe "$DNAbam" --name)
	prefix="$(cut -d'.' -f1 <<<${name})"
	mv MpileupInformativeSNPInput.txt "${prefix}.MpileupInformativeSNPInput.txt"
	mv InputVariants_forphasing.txt "${prefix}.InputVariantsforphasing.txt"
	
    InformativeSNPsvcf=$(dx upload InformativeSNPs.vcf --brief)
    phasedSNPsVCF=$(dx upload phased_SNPs.vcf --brief)
    InputVariantsforphasing=$(dx upload "${prefix}.InputVariantsforphasing.txt" --brief)
    Mpileup=$(dx upload MpileupOutput.txt --brief)
	InformativeSNPstxt=$(dx upload InformativeSNPs.txt --brief)
	InformativeSNPsMpileupInput=$(dx upload "${prefix}.MpileupInformativeSNPInput.txt" --brief)
	
    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.
    
    dx-jobutil-add-output InformativeSNPstxt "$InformativeSNPstxt" --class=file  	
    dx-jobutil-add-output Mpileup "$Mpileup" --class=file
    dx-jobutil-add-output InformativeSNPsvcf "$InformativeSNPsvcf" --class=file
    dx-jobutil-add-output phasedSNPsVCF "$phasedSNPsVCF" --class=file
    dx-jobutil-add-output InputVariantsforphasing "$InputVariantsforphasing" --class=file
    dx-jobutil-add-output InformativeSNPsMpileupInput "$InformativeSNPsMpileupInput" --class=file
}
